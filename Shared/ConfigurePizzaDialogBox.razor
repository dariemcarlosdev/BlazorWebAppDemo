@inject HttpClient HttpClient

@* This component is a dialog box that shows the selected special pizza and allows the customer to select the pizza size

Why adding the @bind="Pizza.Size" code provide so much functionality? 
If we examine the whole of the ConfigurePizzaDialog.razor code, we'll see that we had already connected the other elements to the pizza's properties.
For example, the price updates because of this code:

Price: <span class="price">@(Pizza.GetFormattedTotalPrice())</span>
The price updates as the pizza size changes because the method on the pizza GetFormattedTotalPrice() uses the pizza size to calculate the total price.
 *@
<div class="dialog-container">
    <div class="dialog">
        <div class="dialog-title">
            <h2>@Pizza.Special.Name</h2>
            @Pizza.Special.Description
        </div>
        <form class="dialog-body">
            <div>
                <label>Pizza Size:</label>
                <input type="range" min="@Pizza.MinimumSize" max="@Pizza.MaximumSize" step="1" @bind="Pizza.Size" @bind:event="oninput">
                <span class="size-label">
                    @(Pizza.Size)" <strong>($@(Pizza.GetFormattedTotalPrice()))</strong>
                </span>
            </div>
        </form>

        <div class="dialog-buttons">
            <button class="btn btn-secondary mr-auto" @onclick="OnCancel">Cancel</button>
            <span class="mr-center">
                Price: <span class="price">@(Pizza.GetFormattedTotalPrice())</span>
            </span>
            <button class="btn btn-success ml-auto" @onclick="OnConfirm">Order ></button>
        </div>
    </div>
</div>

@code {
    // allow parameters to be passed into the component
    [Parameter] 
    public Pizza Pizza { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }
    [Parameter]
    public EventCallback OnConfirm { get; set; }
}
