@page "/"
@using BlazingPizza.Model
@using BlazingPizza.Services
@inject PizzaSaleState PizzaSaleState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject PizzaOrderStateService OrderStateService


<div class="main">
    <h1>Blazing Pizza Demo App</h1>
    <p>Today we have sold this pizzas: @PizzaSaleState.PizzaSoldToday</p>
    <ul>
       
    </ul>
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                @* Allow the webpage to call the server - side ShowConfigurePizzaDialog method by allowing customers to select a pizza *@
                <li @onclick="@(()=> OrderStateService.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description;
                        <span class="price">@special.GetFormattedBasePrice()</span>>
                        <span>
                            <button @onclick="IncrementSales">Buy a Pizza</button>
                        </span>
                    </div>
                </li>

            }
        }
    </ul>
</div>

@if (OrderStateService.showingConfigureDialog)
{
    <ConfigurePizzaDialog OnCancel="OrderStateService.CancelConfigurePizzaDialog" OnConfirm="OrderStateService.ConfirmConfigurePizzaDialog" Pizza="OrderStateService.configuringPizza" />
}

@code{
    List<PizzaSpecial> specials = [];
    // Pizza configuringPizza;
    // bool showingConfigureDialog;

    private void IncrementSales() => PizzaSaleState.PizzaSoldToday++;

    //When the page is initialized, it adds six pizzas to the array.
    protected override async Task OnInitializedAsync()
    {
        const string getSpecials = "api/specials";
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + getSpecials);
    }
   
  
}
