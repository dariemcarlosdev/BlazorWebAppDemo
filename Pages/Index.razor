@page "/"
@using BlazingPizza.Model
@using BlazingPizza.Services
@inject SaleStateService PizzaSaleState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject OrderStateService OrderStateService


<div class="main">
    <h1>My favorite pizza is: @favPizza</h1>
    <p>
        Enter favorite pizza:
        @* To bind a control, you would use the @bind directive *@
        <input @bind-value="favPizza" @bind-value:event="oninput" />
    </p>
    <h1>Blazing Pizza Demo App</h1>
    <p>Today we have sold this pizzas: @PizzaSaleState.PizzaSoldToday</p>
    <p>Your orders today: @OrderStateService.PizzaOrderedToday</p>
    <ul>
       
    </ul>
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                @* Allow the webpage to call the server - side ShowConfigurePizzaDialog method by allowing customers to select a pizza *@
                <li @onclick="@(()=> OrderStateService.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description;
                        <span class="price">@special.GetFormattedBasePrice()</span>>
                        <span>
                            <button @onclick="IncrementSales">Buy a Pizza</button>
                        </span>
                    </div>
                </li>

            }
        }
    </ul>
</div>

@if (OrderStateService.ShowingConfigureDialog)
{
    <ConfigurePizzaDialogBox OnCancel="OrderStateService.CancelConfigurePizzaDialog" OnConfirm="OrderStateService.ConfirmConfigurePizzaDialog" Pizza="OrderStateService.ConfiguringPizza" />
}

@* sidebar that will display all the pizzas that a customer has added to their order. *@
@* This HTML adds a sidebar to the page. If there are any pizzas in OrderStateService.Order, it displays them. If there are no orders, customers are prompted to add som *@

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Here your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                <div class="cart-item">
                    <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                    <div class="item-price">
                        @configuredPizza.GetFormattedTotalPrice()
                    </div>
                    <a @onclick="@(()=> OrderStateService.RemoveConfiguredPizzaFromOrder(configuredPizza))" class="delete-item">x</a>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout" class="@(OrderStateService.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>

@code{

    private string favPizza { get; set; } = "Margherita";
    List<PizzaSpecial> specials = [];

    //=>(lambda operator )used to create lambda expression(anonymous func. containing expressions and statments),
    //  can be used to create delegate or expression tree types.
    Order order => OrderStateService.Order;


    // Pizza configuringPizza;
    // bool showingConfigureDialog;

    private void IncrementSales() => PizzaSaleState.PizzaSoldToday++;

    //When the page is initialized, it adds six pizzas to the array.
    protected override async Task OnInitializedAsync()
    {
        const string getSpecials = "api/specials";
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + getSpecials);
    }
   
  
}
